----------------------------------
---- create TblCategory
----------------------------------
drop table if exists TblCategory;
Create table TblCategory (
	Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	CategoryName varchar(40),
	Colour varchar(6)
);

----------------------------------
---- create TblBudgetItem
----------------------------------
drop table if exists TblBudgetItem;
Create table TblBudgetItem (
	Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	CategoryId int references TblCategory(Id),
	Amount int,
	EffectiveDate date,
	IsYearly int
);

----------------------------------
---- create TblTransaction
----------------------------------
drop table if exists TblTransaction;
Create table TblTransaction (
	Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	[Date] date,
	Amount int,
	Memo varchar(200),
	CategoryId int references TblCategory(id)
);

----------------------------------
---- create TblImportFileFormat
----------------------------------
drop table if exists TblImportFileFormat;
Create table TblImportFileFormat (
	Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	ImportFileFormatName varchar(100),
	DateKey varchar(100),
	MemoFormat varchar(100),
	AmountKey varchar(100),
	InvertAmounts int,
	HeaderLines int,
	Delimiter varchar(1)
);

----------------------------------
---- create TblDefaultCategorization
----------------------------------
drop table if exists TblDefaultCategorization;
Create table TblDefaultCategorization (
	Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	Memo varchar(200),
	CategoryId int references TblCategory(id)
);

----------------------------------
---- create VwCategoryTotal
----------------------------------
drop VIEW if exists VwCategoryTotal;
CREATE VIEW VwCategoryTotal AS
	SELECT 
		ROW_NUMBER() over (order by MONTH) AS RowNumber,
		SUM(t.amount) AS CategoryTotal, 
		c.CategoryName AS CategoryName,
		c.Id As CategoryId,
		c.Colour AS CategoryColour,
		cast(t.Month as int) AS Month,
		cast(t.Year AS int) AS Year,
		(SUM(t.amount) * 100000) / ((SELECT SUM(amount) FROM TblTransaction WHERE categoryid=0 AND cast(strftime('%m', [DATE]) as int) = t.Month) * 1000) as PercentOfMonthlyIncome
		
	FROM (SELECT *, strftime('%m', [DATE]) as MONTH, strftime('%Y', [DATE]) as Year from TblTransaction) AS t 
	inner JOIN TblCategory AS c ON c.id = t.CategoryId
	GROUP BY t.Month, t.CategoryId
	ORDER BY t.Month;

----------------------------------
---- create VwMonthInOut
----------------------------------
drop VIEW if exists VwMonthInOut;
CREATE VIEW VwMonthInOut AS
	SELECT 
		ROW_NUMBER() over (order by MONTH) AS RowNumber,
		SUM(CASE WHEN t.Amount > 0 THEN t.Amount ELSE 0 END) AS MonthIn,
		Abs(SUM(CASE WHEN t.Amount < 0 THEN t.Amount ELSE 0 END)) AS MonthOut,
		cast(t.Month as int) AS Month,
		cast(t.Year AS int) AS Year
		FROM (SELECT *, strftime('%m', [DATE]) as MONTH, strftime('%Y', [DATE]) as Year from TblTransaction) AS t
		GROUP BY t.Month
		ORDER BY t.Month;

----------------------------------
---- create VwYearInOut
----------------------------------
drop VIEW if exists VwYearInOut;
CREATE VIEW VwYearInOut AS
	SELECT 
	RowNumber,
	SUM(MonthIn) AS YearIn,
	Sum(Abs(MonthOut)) AS YearOut,
	Year
	FROM VwMonthInOut
	GROUP BY Year
	ORDER BY Year;
	--SELECT 
	--ROW_NUMBER() over (order by year) AS RowNumber,
	--SUM(CASE WHEN t.Amount > 0 THEN t.Amount ELSE 0 END) AS YearIn,
	--Abs(SUM(CASE WHEN t.Amount < 0 THEN t.Amount ELSE 0 END)) AS YearOut,
	--cast(t.Year AS int) AS Year
	--FROM (SELECT *, strftime('%Y', [DATE]) as Year from TblTransaction) AS t
	--GROUP BY t.Year
	--ORDER BY t.Year;