@model BreakdownViewModel

@{
    ViewData["Title"] = "Breakdown " + Model.BreakdownRangeStart.ToString("MMMM yyyy");
}

<div class="container">

    <div>

        <h1 class="display-4">Breakdown @Model.TitleDate</h1>

        @if (Model.InOut != null)
        {
            <div class="d-flex align-items-center">
                <div class="dashboard-month-inout">
                    <div class="dashboard-month-in month-inout-pill">In: @(Helper.FormatCurrency(Model.InOut.ValueIn))</div>
                    <div class="dashboard-month-out month-inout-pill">Out: @(Helper.FormatCurrency(Model.InOut.ValueOut))</div>
                    <div class="dashboard-month-net month-inout-pill">Net: @(Helper.FormatCurrency(Model.InOut.ValueDiff))</div>
                </div>
            </div>
        }

    </div>

    <div style="height:40px"></div>

    <div class="row">
        <div class="col-lg-6">

            <h4>Categories</h4>

            @{
                DateTime budgetEnd = DateTime.Now < Model.BreakdownRangeEnd ? DateTime.Now : Model.BreakdownRangeEnd;
                int effectiveBudgetDays = (budgetEnd - Model.BreakdownRangeStart).Days;
                double budgetFactor = 12.0 * effectiveBudgetDays / 365.0; // TODO: leap year?
            }

            <table class="table breakdown-table categorized-table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Category</th>
                        <th scope="col" class="numeric">Total Spent</th>
                        <th scope="col" class="numeric">% of in.</th>
                        <th scope="col" class="numeric" title="Effective days: @effectiveBudgetDays">Budget</th>
                        <th scope="col" class="numeric"></th>
                    </tr>
                </thead>
                <tbody>
                    
                    @{
                        CategoryTotal[] sorted = Model.CategoryTotals.OrderByDescending(t => Math.Abs(t.Total)).ToArray();
                        for (int i = 0; i < sorted.Length; i++)
                        {
                            CategoryTotal cat = sorted[i];

                            TblBudgetItem? budget = null;
                            if (cat.Category != null)
                                budget = Model.EffectiveBudgetItems?.Where(b => b.CategoryId == cat.Category.Id).FirstOrDefault();

                            <tr data-categoryid="@(cat.Category?.Id ?? -1)">
                                <td scope="row">@(i+1)</td>
                                <td>@(cat.Category?.CategoryName ?? "(uncategorized)")</td>
                                <td class="numeric">@Helper.FormatCurrency(cat.Total)</td>
                                <td class="numeric">@cat.PercentOfIncome.ToString("0.#")%</td>
                                @if (budget != null && budget.Amount != null)
                                {
                                    int monthlyBudgetAmount = (int)Math.Floor(budget.Amount.Value * budgetFactor);

                                    <td class="numeric">@Helper.FormatCurrency(budget.IsYearly.IsTrue() ? budget.Amount.Value : monthlyBudgetAmount)</td>
                                    <td class="numeric">
                                        
                                        @if (budget.IsYearly.IsTrue())
                                        {
                                            @* just show pct of whole year for yearly budget items *@
                                            <span class="text-warning">
                                                @Math.Abs((decimal)cat.Total / budget.Amount.Value * 100).ToString("0.0")%
                                            </span>
                                        }
                                        else
                                        {
                                            int diff = monthlyBudgetAmount + cat.Total;
                                            decimal deviation = (decimal)diff / monthlyBudgetAmount * 100;

                                            <span class="@(diff < 0 ? "text-danger" : "text-success")" title="@Helper.FormatCurrency(diff)">
                                                <span class="d-none">raw budget: @budget.Amount.Value</span>
                                                @(deviation < (decimal)0 ? "+" : "-")@Math.Abs(deviation).ToString("0.0")%
                                            </span>
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td></td>
                                    <td></td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">

            <h4>Spending</h4>

            <div id="chartContainer" style="height: 300px; width: 100%;"></div>
        </div>
    </div>

    @if (Model.Transactions.Any())
    {
        <div style="height:40px"></div>

        <div class="row">

            <h4>Transactions</h4>

            <table class="table categorized-table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Date</th>
                        <th>Memo</th>
                        <th class="numeric">Amount</th>
                        <th>Category</th>
                        <th></th>
                    </tr>                
                </thead>
                <tbody>

                    @{
                        TblTransaction[] tsorted = Model.Transactions.OrderBy(t => t.Date).ToArray();
                        for (int i = 0;i < tsorted.Length;i++)
                        {
                            CategoryTotal? cat = Model.CategoryTotals.Where(t => t.Category != null && t.Category.Id == tsorted[i].CategoryId).FirstOrDefault();
                            <tr class="transaction-row" data-categoryid="@(tsorted[i].CategoryId ?? -1)">
                                <td>@(i+1)</td>
                                <td title="@tsorted[i].Date?.ToString("dddd, MMMM d, yyyy")">@tsorted[i].Date?.ToString("yyyy-MM-dd")</td>
                                <td>@tsorted[i].Memo</td>
                                <td class="numeric">@(tsorted[i].Amount != null ? Helper.FormatCurrency(tsorted[i].Amount.Value) : "")</td>
                                <td>@cat?.Category.CategoryName</td>
                                <td style="text-align:right">
                                    <div class="d-flex flex-column-reverse align-items-end">
                                        <div class="transaction-row-edit">
                                            <img src="/img/Edit_fill.svg" alt="Edit row" width="24" height="24" />
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }


                </tbody>
            </table>

        </div>
    }
   
</>

<script>
    const rangeStart = "@(Model.BreakdownRangeStart.ToString("yyyy-MM-dd"))"
    const rangeEnd = "@(Model.BreakdownRangeEnd.ToString("yyyy-MM-dd"))"
</script>
<script type="text/javascript" src="/js/breakdown.js"></script>